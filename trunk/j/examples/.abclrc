;;; -*- Mode: Lisp -*-

;;; See also:
;;;   .clinit.cl         (Allegro)
;;;   .cmucl-init.lisp   (CMUCL)
;;;   .sbclrc            (SBCL)
;;;   .clisprc.lisp      (CLISP)
;;;   .lispworks         (LispWorks)

(defun run-ansi-tests (&optional (compile-tests t))
  (format t "COMPILE-TESTS is ~A~%" compile-tests)
  (let ((*default-pathname-defaults* #-(or windows mswindows win32)
                                     #p"/home/peter/gcl/ansi-tests/"
                                     #+(or windows mswindows win32)
                                     #p"c:\\cygwin\\home\\peter\\gcl\\ansi-tests\\"))
    #+(and abcl unix)
    (run-shell-command "make clean" :directory *default-pathname-defaults*)
    (time (load (if compile-tests "compileit.lsp" "doit.lsp")))))

(defun run-random-tests (size nvars count)
  (let ((*default-pathname-defaults* #-(or windows mswindows win32)
                                     #p"/home/peter/gcl/ansi-tests/"
                                     #+(or windows mswindows win32)
                                     #p"c:\\cygwin\\home\\peter\\gcl\\ansi-tests\\"))
    (load "gclload1.lsp")
    (load "random-int-form.lsp")
    (let ((f (find-symbol "TEST-RANDOM-INTEGER-FORMS" "CL-TEST")))
      (when f
        (let (#+abcl (*suppress-compiler-warnings* t)
              (*random-state* (make-random-state t)))
          (time (funcall f size nvars count)))))))

#+abcl
(autoload 'do-tests "rt.lisp")

#+allegro
(top-level:alias "ap" (arg) (apropos arg nil nil t))
#+allegro
(top-level:alias "de" (arg) (describe (eval arg)))

#+cmu
(setf *gc-verbose* nil)

#+sbcl
(require '#:asdf)
#+sbcl
(require '#:sb-aclrepl)
