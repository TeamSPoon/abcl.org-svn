# $Id$

# XXX should be called 'build.properties' but this collides with its usage by the Eclipe IDE

# Template for settings the Ant based build process.


# Attempt to perform incremental compilation? 
#abcl.build.incremental=true

# skips the compilation of Lisp sources in Netbeans 
# (for debugging compiler-pass1.lisp and subsequent passes)
#abcl.compile.lisp.skip=true

# java.options sets the Java options in the abcl wrapper scripts

# Examples:

# Java7 on 64bit optimizations
#java.options=-d64 -Xmx16g -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=2g

# Set the JVM to use a maximum of 1GB of RAM (only works for 64bit JVMs)
#java.options=-d64 -Xmx1g

# Use a default garbage collector on another 
#java.options=-d64 -Xmx4g -XX:+PrintGCDetails -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:MaxGCPauseMillis=100

# Use a separate concurrent GC thread (java-1.6_14 or later)
#java.options=-d64 -Xmx8g -XX:+UseConcMarkSweepGC

# Java 5 era (???) flag to GC class definitions
#java.options=-XX:+CMSPermGenSweepingEnabled

# The unloading of class definitions is a per jvm policy.  For those
# implementations which run out of permgen space, the following should
# help things out.
#java.options=-d64 -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=1g

# Enable assertions specified via the JVM contract
#java.options=-ea

# Additional site specific startup code to be merged in 'system.lisp' at build time
#abcl.startup.file=${basedir}/startup.lisp
