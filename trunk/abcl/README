GENERAL INFORMATION
===================

Armed Bear Common Lisp is an implementation of ANSI Common Lisp that
runs in a Java virtual machine.  It compiles its code to Java byte code.


LICENSE
=======

Armed Bear Common Lisp is distributed under the GNU General Public
License with classpath exception (described below).

A copy of GNU General Public License (GPL) is included in this
distribution, in the file COPYING.

Linking this software statically or dynamically with other modules is
making a combined work based on this software. Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this software give
you permission to link this software with independent modules to
produce an executable, regardless of the license terms of these
independent modules, and to copy and distribute the resulting
executable under terms of your choice, provided that you also meet,
for each linked independent module, the terms and conditions of the
license of that module. An independent module is a module which is not
derived from or based on this software. If you modify this software,
you may extend this exception to your version of the software, but you
are not obligated to do so. If you do not wish to do so, delete this
exception statement from your version.


RUNNING FROM BINARY RELEASE
===========================

After you have downloaded a binary release archive, unzip or untar it
into its own directory. To run ABCL directly from this directory, make
sure Java (version 1.5 or up) is in your path. Then, type the following
command:

  $ java -jar abcl.jar

Which should result output like the following:

----------------
Armed Bear Common Lisp 0.19.1
Java 1.6.0_14 Sun Microsystems Inc.
Java HotSpot(TM) Client VM
Low-level initialization completed in 0.9 seconds.
Startup completed in 2.294 seconds.
Type ":help" for a list of available commands.
CL-USER(1):
----------------

In order to build ABCL, you need the full SDK. However, in order to
just run it (like the above), the JRE is enough.


BUILDING
========

If you want to build ABCL, you have 3 options. The first option
applies when you come from a lisp background. The second and thirds
options are more appropriate when you come from Java development:

 I)  Bootstrap ABCL using a Common Lisp implementation
     Supported implementations for this process: SBCL, CMUCL, OpenMCL,
     Allegro CL, LispWorks or CLISP.

II)  Use the Ant make-like build tool for Java environments
     The tested lowest working version is Ant 1.7.0.

III) Use the Netbeans 6.x IDE to open ABCL as a project.


In both cases you need a supported JDK version (1.5 and 1.6 have been
tested).  Just the JRE isn't enough.



I. Lisp-based build
-------------------

Copy the file 'customizations.lisp.in' to customization.lisp', in the
directory containing this README file, editing to suit your situation,
paying attention to the comments in the file.


Use ./build-from-lisp.sh <lisp-of-choice>, e.g.

  ./build-from-lisp.sh sbcl

Use abcl.bat on Windows or ./abcl on Unix to start ABCL.
Note: abcl.bat and abcl contain absolute paths, so you'll need
to edit them if you move things around after the build.


If you're developing on ABCL, you may want to use

  ./build-from-lisp.sh <implementation> --clean=nil

to not do a full rebuild.


In case of failure in the javac stage, you might try this:

  ./build-from-lisp.sh <implementation> --full=t --clean=t --batch=nil

This invokes javac separately for each .java file, which avoids running
into limitations on command line length (but is a lot slower).


II. Ant-based build
-------------------

With Ant in your path, executing

    ant -find build.xml abcl.wrapper

from the directory containing this README file will create an
executable wrapper ('abcl' under UNIX, 'abcl.bat' under Windows).
Use this wrapper to start the ABCL Java program.


III. Netbeans-based build
-------------------------

One should be able to open the project as a project in Netbeans 6.x.


BUGS
====

A lot of (renewed) energy has been spent to make ABCL a compliant
and practically useable Common Lisp implementation.  Because of this,
ABCL 0.19.1 now fails only 29 out of 21702 tests in the ANSI CL test
suite.  Next to that, the fail count of the Maxima test suite has been
reduced to only 5 - rounding errors.

ABCL's CLOS does not handle on-the-fly redefinition of classes
correctly. Quite a bit of energy has been spent in versions 0.16.0 and
0.17.0 to improve CLOS performance. There is no support for the long
form of DEFINE-METHOD-COMBINATION, and certain other required CLOS
features are also missing. Enough CLOS is there to run
ASDF2 and CL-PPCRE.

There is no MOP worth mentioning.

Patches to address any of the issues mentioned above will be gladly
accepted.

Please report problems to the development mailing list:

    armedbear-devel@common-lisp.net

Have fun!

On behalf of all ABCL development team and contributors,
Erik Huelsmann
March 20, 2010
